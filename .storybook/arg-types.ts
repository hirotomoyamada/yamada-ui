import { ArgTypes } from '@storybook/react'
import { defaultTheme, styles, pseudos, isObject } from '@yamada-ui/react'

export const createArgTypes = (): ArgTypes => {
  const styleArgs: ArgTypes = Object.entries(styles).reduce((obj, [key, parameter]) => {
    if (typeof parameter === 'boolean') {
      obj[key] = { description: `Default CSS parameter` }
    } else {
      const { token, property } = parameter

      if (token) {
        obj[key] = { description: `'${token}' in theme tokens` }
      } else if (property) {
        if (typeof property !== 'string' || !property.startsWith('--'))
          obj[key] = { description: `Default CSS '${property}' parameter` }
      } else {
        switch (key) {
          case 'isTruncated':
            obj[key] = { description: `Default CSS '${property}' parameter` }
            break

          case 'backgroundClip':
          case 'bgClip':
            obj[key] = { description: `Default CSS backgroundClip parameter` }
            break

          default:
            obj[key] = { description: `${key} in theme styles` }
        }
      }
    }

    return obj
  }, {} as ArgTypes)

  const pseudoArgs: ArgTypes = Object.entries(pseudos).reduce((obj, [key, property]) => {
    property = property.replace(/[&:|&]/g, '')

    obj[key] = { description: `'${property}' is pseudo-selector or data-attribute or class` }

    return obj
  }, {} as ArgTypes)

  const componentArgs: ArgTypes = {
    colorScheme: {
      control: 'select',
      options: colorSchemesOptions(),
      description: `This is generated by the theme colors`,
    },
    variant: { description: `This variant in theme components variants` },
    color: { description: `This color in theme components colors` },
  }

  const uiArgs: ArgTypes = {
    as: { description: `This changes the rendering of the element` },
    __sx: { description: `Superset of CSS` },
    __css: { description: `Yamada-ui set CSS` },
    css: { description: `Developer set CSS` },
    animation: { description: `Set CSS using useAnimation` },
    children: { description: `React node` },
  }

  return { ...styleArgs, ...pseudoArgs, ...componentArgs, ...uiArgs }
}

const defaultKeys = ['primary', 'secondary', 'warning', 'danger', 'link']

const hueKeys = ['50', '100', '200', '300', '400', '500', '600', '700', '800', '900']

const isDefault = (key: any): boolean => defaultKeys.includes(key)

const isHue = (value: any): boolean => {
  if (!isObject(value)) return false

  const keys = Object.keys(value)

  return hueKeys.every((key) => keys.includes(key))
}

export const colorSchemesOptions = (): string[] => {
  const { colors } = defaultTheme

  if (!isObject(colors)) return []

  return Object.entries(colors).reduce((array, [key, value]) => {
    if (isHue(value) || isDefault(key)) array.push(key)

    return array
  }, [] as string[])
}
